[{"/Users/nicoalimin/Code/snakeladder/src/components/board.js":"1","/Users/nicoalimin/Code/snakeladder/src/index.js":"2","/Users/nicoalimin/Code/snakeladder/src/reportWebVitals.js":"3","/Users/nicoalimin/Code/snakeladder/src/constants/prompts.js":"4"},{"size":7149,"mtime":1606469224094,"results":"5","hashOfConfig":"6"},{"size":541,"mtime":1606376399948,"results":"7","hashOfConfig":"6"},{"size":362,"mtime":1606372715974,"results":"8","hashOfConfig":"6"},{"size":157,"mtime":1606467992460,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"12"},"1k0gsv2",{"filePath":"13","messages":"14","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/nicoalimin/Code/snakeladder/src/components/board.js",["19","20","21"],"import { Avatar, Box, Button, Grid, GridList, GridListTile, List, ListItem, ListSubheader, TextField } from '@material-ui/core'\nimport React from 'react'\nimport Draggable from 'react-draggable'\nimport logo from '../static/logo.jpeg'\nimport diceOne from '../static/dice_one.png'\nimport diceTwo from '../static/dice_two.png'\nimport diceThree from '../static/dice_three.png'\nimport diceFour from '../static/dice_four.png'\nimport diceFive from '../static/dice_five.png'\nimport diceSix from '../static/dice_six.png'\nimport { prompts } from '../constants/prompts'\nimport board from '../static/board.svg'\n\nconst playerGen = (name) => {\n  return {\n    name: name,\n    initials: name,\n    color: `#${Math.floor(Math.random()*16777215).toString(16)}`,\n    points: 0\n  }\n}\nconst players = [playerGen(\"p1\"), playerGen(\"p2\"), playerGen(\"p3\"), playerGen(\"p4\"), playerGen(\"p5\"), playerGen(\"p6\"), playerGen(\"p7\"), playerGen(\"p8\"), playerGen(\"p9\"), playerGen(\"p10\")]\nconst dices = [diceOne, diceTwo, diceThree, diceFour, diceFive, diceSix]\n\nconst initialState = {\n  size: 8,\n  players: [],\n  boxes: [],\n  addPlayerName: \"\",\n  currDiceIndex: 0,\n  currPrompt: {\n    boxNumber: 1,\n    text: \"blahbl abalb lablablabla blbljasl jkdfghs dijkbhuil\"\n  },\n}\n\nexport default class Board extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = initialState\n  }\n\n  componentDidMount() {\n    const matrix = [];\n    for (let i = 0; i < this.state.size; i++) {\n      const row = []\n      for (let j = 0; j < this.state.size; j++) {\n        row.push([])\n      }\n      matrix.push(row)\n    }\n    this.setState({...this.state, boxes: matrix})\n  }\n\n  render() {\n    const boxes = []\n    for (let i = this.state.size - 1; i >= 0; i--) {\n      for (let j = 0; j < this.state.size; j++) {\n        let count = i * this.state.size + j + 1\n        if (i % 2 === 1) count = (i + 1) * this.state.size - j\n        const box = (\n          <GridListTile id={count} className=\"ular-mabok-box\" onClick={() => {\n            this.setState({\n              ...this.state,\n              currPrompt: {\n                boxNumber: count,\n                text: prompts[count]\n              }\n            })\n          }}>\n            <Box>{count}</Box>\n          </GridListTile>\n        )\n        boxes.push(box)\n      }\n    }\n\n    const peons = []\n    const maxSize = 5\n    for (let i = 0; i < maxSize; i++) {\n      for (let j = 0; j < maxSize; j++) {\n        const counter = i * maxSize + j\n        if (counter >= this.state.players.length) break;\n        const currPlayer = this.state.players[counter]\n        const peon = (\n            <Draggable\n            defaultPosition={{x: (-(100 * i)), y: (-80 + (20 * i))}}\n            grid={[100, 100]}\n            scale={1}\n          >\n            <Avatar style={{ backgroundColor: currPlayer.color, height: \"20px\", width: \"20px\", fontSize: \"12px\" }}>{currPlayer.initials}</Avatar>\n          </Draggable>\n        )\n        peons.push(peon)\n      }\n    }\n\n    const listItems = this.state.players.map((p, index) => {\n      return (\n        <ListItem className=\"players\">\n          <div className=\"delete-button\" onClick={() => {\n            this.setState({\n              ...this.state,\n              players: this.state.players.filter(pl => pl.name !== p.name)\n            })\n          }}>\n            x\n          </div>\n          &nbsp;{index+1}.&nbsp;<Avatar style={{ backgroundColor: p.color, height: \"20px\", width: \"20px\", fontSize: \"12px\" }}>{p.initials}</Avatar>\n          &nbsp;\n          -\n          &nbsp;{p.name}\n        </ListItem>\n      )\n    })\n\n    const handleAddPlayer = () => {\n      if (this.state.addPlayerName === \"\") return\n      if (!!this.state.players.find(p => p.name === this.state.addPlayerName)) return\n      const player = {\n        name: this.state.addPlayerName,\n        initials: this.state.addPlayerName.substring(0, 2),\n        color: `#${Math.floor(Math.random()*16777215).toString(16)}`,\n        points: 0\n      }\n      this.setState({\n        ...this.state,\n        players: [...this.state.players, player].sort((a, b) => (a.points - b.points)),\n        addPlayerName: initialState.addPlayerName\n      })\n    }\n\n    let currDice;\n    if (this.state.currDiceIndex === null) {\n      currDice = \"ðŸ¤”\";\n    } else {\n      currDice = <img src={dices[this.state.currDiceIndex]} />\n    }\n\n    return (\n      <>\n        <Grid container className=\"ular-mabok\">\n          <Grid item xs={8}>\n            <Grid container item>\n              <Grid item xs={10} className=\"top-bar\">\n                <Avatar src={logo} className=\"ular-mabok-logo\" />\n                <TextField\n                  className=\"ular-mabok-input\"\n                  label=\"Add player\"\n                  placeholder=\"Insert name here...\"\n                  value={this.state.addPlayerName}\n                  margin=\"normal\"\n                  InputLabelProps={{\n                    shrink: true,\n                  }}\n                  variant=\"outlined\"\n                  onChange={(e) => {\n                    this.setState({ ...this.state, addPlayerName: e.target.value })\n                  }}\n                  onKeyDown={(e) => { if (e.key === 'Enter') handleAddPlayer() }}\n                />\n              </Grid>\n              <Grid item xs={2} className=\"ular-mabok-button-container\">\n                <Button variant=\"contained\" color=\"primary\" className=\"ular-mabok-button\" onClick={() => handleAddPlayer()}>\n                  Add Player\n                </Button>\n              </Grid>\n            </Grid>\n            <Grid item>\n              <GridList cols={8} className=\"ular-mabok-board\" style={{ margin: \"auto\" }}>\n                {boxes}\n                {peons}\n              </GridList>\n            </Grid>\n          </Grid>\n          <Grid item container xs={2} style={{ paddingLeft: \"10px\" }} className=\"sidebar\">\n            <Grid item container xs={12} className=\"dice-roll\">\n              <Grid className=\"title\" xs={12}>\n                Roll Me!\n              </Grid>\n              <Grid className=\"title\" xs={12} onClick={() => {\n                this.setState({ ...this.state, currDiceIndex: null })\n                setTimeout(() => {\n                  this.setState({ ...this.state, currDiceIndex: (Math.floor(Math.random() * 6)) })\n                }, 1000)\n              }}>\n                {currDice}\n              </Grid>\n            </Grid>\n            <Grid className=\"prompt\">\n              <Box className=\"number\">\n                #{this.state.currPrompt.boxNumber}\n              </Box>\n              <Box className=\"content\">\n                {this.state.currPrompt.text}\n              </Box>\n            </Grid>\n          </Grid>\n          <Grid item container xs={2} style={{ paddingLeft: \"10px\" }} className=\"sidebar\">\n            <Grid item xs={12} className=\"leaderboard\">\n              <List\n                subheader={\n                  <ListSubheader className=\"subheader\">\n                    Leaderboard\n                  </ListSubheader>\n                }\n              >\n                {listItems}\n              </List>\n            </Grid>\n          </Grid>\n        </Grid>\n      </>\n    )\n  }\n}","/Users/nicoalimin/Code/snakeladder/src/index.js",[],"/Users/nicoalimin/Code/snakeladder/src/reportWebVitals.js",[],"/Users/nicoalimin/Code/snakeladder/src/constants/prompts.js",[],{"ruleId":"22","severity":1,"message":"23","line":12,"column":8,"nodeType":"24","messageId":"25","endLine":12,"endColumn":13},{"ruleId":"22","severity":1,"message":"26","line":22,"column":7,"nodeType":"24","messageId":"25","endLine":22,"endColumn":14},{"ruleId":"27","severity":1,"message":"28","line":137,"column":18,"nodeType":"29","endLine":137,"endColumn":63},"no-unused-vars","'board' is defined but never used.","Identifier","unusedVar","'players' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement"]